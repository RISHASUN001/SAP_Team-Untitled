#!/bin/bash

# SAP Team Python Backend Startup Script
# This script starts only the Python backend services
# Use 'npm run dev' separately to start frontend + main backend

echo "üöÄ Starting SAP Team Python Backend Services..."

# Kill any existing processes first
echo "üßπ Cleaning up existing processes..."
pkill -f "mentor_mode.py" 2>/dev/null || true
pkill -f "practice_mode.py" 2>/dev/null || true  
pkill -f "onboarding_mode.py" 2>/dev/null || true
pkill -f "ai_skill_gap.py" 2>/dev/null || true
pkill -f "course_search.py" 2>/dev/null || true
pkill -f "node.*index.js" 2>/dev/null || true

sleep 2

# Change to the chatbot directory
cd "$(dirname "$0")/chatbot"

echo "üìÇ Current directory: $(pwd)"
echo "üìÅ Available files:"
ls -la *.py

# Verify agentic AI components are present
echo ""
echo "ü§ñ Verifying Agentic AI Components:"
agentic_files=("skills_analysis_agent.py" "goals_analysis_agent.py" "feedback_analysis_agent.py" "agent_orchestrator.py")
for file in "${agentic_files[@]}"; do
    if [ -f "$file" ]; then
        echo "   ‚úÖ $file found"
    else
        echo "   ‚ùå $file MISSING"
    fi
done

# Run agentic health check
echo ""
echo "üîç Running Agentic AI Health Check..."
if python3 agentic_health_check.py; then
    echo "‚úÖ Agentic AI components verified!"
else
    echo "‚ö†Ô∏è Agentic AI health check failed - continuing anyway..."
fi

# Step 1: Start mentor_mode.py first (initializes ChromaDB)
echo ""
echo "1Ô∏è‚É£ Starting Mentor Mode (Port 5001) - Initializes ChromaDB..."
python3 mentor_mode.py &
MENTOR_PID=$!
echo "üéØ Mentor Mode started with PID: $MENTOR_PID"

# Wait a bit for mentor mode to initialize ChromaDB
sleep 5

# Step 2: Start practice_mode.py (uses existing ChromaDB)
echo ""
echo "2Ô∏è‚É£ Starting Practice Mode (Port 5002)..."
python3 practice_mode.py &
PRACTICE_PID=$!
echo "üéÆ Practice Mode started with PID: $PRACTICE_PID"

# Step 3: Start onboarding_mode.py (uses existing ChromaDB)
echo ""
echo "3Ô∏è‚É£ Starting Onboarding Mode (Port 5003)..."
python3 onboarding_mode.py &
ONBOARDING_PID=$!
echo "üìö Onboarding Mode started with PID: $ONBOARDING_PID"

# Step 4: Start ai_skill_gap.py (AGENTIC AI enabled)
echo ""
echo "4Ô∏è‚É£ Starting AI Skill Gap (Port 5004) - ü§ñ AGENTIC AI ENABLED..."
python3 ai_skill_gap.py &
SKILL_PID=$!
echo "ü§ñ AI Skill Gap started with PID: $SKILL_PID"

# Step 5: Start course_search.py (new backend service)
echo ""
echo "5Ô∏è‚É£ Starting Course Search (Port 5005)..."
python3 course_search.py &
COURSE_PID=$!
echo "üîç Course Search started with PID: $COURSE_PID"

# Wait a bit for Python backends to fully start
sleep 3

echo ""
echo "‚úÖ Python backends started successfully!"
echo ""
echo "üîó Backend APIs:"
echo "   ‚Ä¢ Mentor Mode API: http://localhost:5001"
echo "   ‚Ä¢ Practice Mode API: http://localhost:5002" 
echo "   ‚Ä¢ Onboarding Mode API: http://localhost:5003"
echo "   ‚Ä¢ AI Skill Gap API: http://localhost:5004 (ü§ñ AGENTIC AI)"
echo "   ‚Ä¢ Course Search API: http://localhost:5005"
echo ""
echo "üìä Process IDs:"
echo "   ‚Ä¢ Mentor Mode: $MENTOR_PID"
echo "   ‚Ä¢ Practice Mode: $PRACTICE_PID"
echo "   ‚Ä¢ Onboarding Mode: $ONBOARDING_PID"
echo "   ‚Ä¢ AI Skill Gap: $SKILL_PID"
echo "   ‚Ä¢ Course Search: $COURSE_PID"
echo ""
echo "üí° To start the full application:"
echo "   1. Run 'npm run dev' in the main Agentic_SAP directory"
echo "   2. This will start frontend (port 5173) and main backend (port 3001)"
echo ""
echo "üõë To stop Python backends, run: ./stop_all_backends.sh"
echo ""

# Keep the script running and show logs
echo "üìù Showing Python backend logs (Ctrl+C to stop)..."
echo "======================================"

# Wait for all background processes
wait
